#compdef eselect kernel-config profile-config rc-config

_eselect_parse_generic() {
  local -a mod_std mod_extra
  local -a eselect_args
  local mod_cur eselect_descr
  local mod descr etype

  eselect_args=($@)
  mod_cur="mod_extra"
  eselect_descr="$(LANG=C COLUMNS=100 eselect --colour=no $eselect_args 2> /dev/null)"

  while IFS="" read -r helpdesc ; do
    case "$helpdesc" in
      ("Built-in modules:"|"Standard actions:"))
        mod_cur="mod_std"
        ;;
      ("Extra modules:"|"Extra actions:"))
        mod_cur="mod_extra"
        ;;
    esac

    if [[ "$helpdesc" =~ '^  [A-Za-z]' ]] ; then
      echo "$helpdesc" | read mod descr
      descr="$(echo "$descr" | sed -r -e 's/.*\s\s\s+//')"
      set -A $mod_cur ${(P)mod_cur} ${mod}:${(q)descr}
    fi
  done <<< "$eselect_descr"

  if [[ -z "${eselect_args[@]}" ]] ; then
    etype="modules"
  else
    etype="actions"
  fi

  if [[ -z "${mod_extra}" && -z "${mod_std}" ]] ; then
    _nothing
  else
    _describe  -V "eselect extra $etype"    mod_extra
    _describe -1V "eselect standard $etype" mod_std
  fi
}

_eselect_parse_action_list() {
  local eselect_list
  local idx descr
  local arr_items=$2

  eselect_list="$(LANG=C COLUMNS=100 eselect --colour=no $1 list 2> /dev/null)"
  while IFS="" read -r ele ; do
    echo "$ele" | read idx descr
    idx=${idx#*\[}
    idx=${idx%\]*}
    if [[ "$idx" =~ '^[0-9]+$' ]]; then
      set -A $arr_items ${(P)arr_items} $idx:${(q)descr}
    fi
  done <<< "$eselect_list"
}


_eselect_module_action() {
  if (( $+functions[_eselect_${1}_action] )) ; then
    _eselect_${1}_action
  else
    _eselect_parse_generic ${1}
  fi
}

_eselect_complete_action() {
  local actionname=$(_eselect_get_module)
  if (( $+functions[_eselect_complete_${actionname}_action] )) ; then
    _eselect_complete_${actionname}_action
  else
    _eselect_complete_action_generic ${actionname}
  fi
}

_eselect_get_module() {
  if [[ $service == "eselect" ]] ; then
    echo $line[1]
  else
    echo ${service%-config}
  fi
}

_eselect_action_index() {
  if [[ $service == "eselect" ]] ; then
    echo 2
  else
    echo 1
  fi
}
_eselect_get_action () {
  echo ${line[$(_eselect_action_index)]}
}

_eselect_action() {
  _eselect_module_action $(_eselect_get_module)
}

_eselect_module() {
  _eselect_parse_generic
}

_eselect_complete_action_generic() {
  local -a items

  if (( $NORMARG + $(_eselect_action_index) == $CURRENT )) ; then
    case "$(_eselect_get_action)" in
      ("set"|"enable"|"disable"))
        _eselect_parse_action_list $1 items
        if [[ -n "${items[@]}" ]] ; then
          _describe  -V 'eselect items' items
          return 0
        fi
    esac
  fi

  _nothing
}

# custom completions:
(( $+functions[_eselect_complete_news_action] )) || _eselect_complete_news_action() {
  local -a items

  case "$(_eselect_get_action)" in
    ("read"|"unread"))
      local -a extra_items=('all:Read all news items')
      if [[ $(_eselect_get_action) == "read" ]] ; then
        extra_items=('new:Read unread news items (default)' "${extra_items[@]}")
      fi
      _eselect_parse_action_list news items

      items=(${(q)extra_items[@]} ${(Oa)items})
      if [[ -n "${items[@]}" ]] ; then
        _describe  -V 'eselect items' items
        return 0
      fi
      ;;
  esac

  _nothing
}

(( $+functions[_eselect_complete_kernel_action] )) || _eselect_complete_kernel_action() {
  local -a items

  if (( $NORMARG + $(_eselect_action_index) == $CURRENT )) ; then
    case "$(_eselect_get_action)" in
      "set")
        for k in ${(@f)$(eselect --colour=no --brief kernel list)} ; do
          items+=${k#linux-}
        done
        local -a expl=(-P linux-)
        compadd -V  'eselect kernel' -P linux- ${items[@]}
        return 0
        ;;
    esac
  fi

  _nothing
}

(( $+functions[_eselect_complete_profile_action] )) || _eselect_complete_profile_action() {
  if (( $NORMARG + $(_eselect_action_index) == $CURRENT )) ; then
    case "$(_eselect_get_action)" in
      "set")
        _values  'eselect profiles' $(eselect --colour=no --brief profile list)
        return 0
        ;;
    esac
  fi

  _nothing
}

eselect_comp() {
  integer NORMARG

  case "$service" in
    eselect)
      _arguments -A '-*' -n \
        '--brief[Make output shorter]' \
        '(--colour --color)'--colo{,u}r='[Enable or disable colour output]:colour:(yes no)' \
        '1:eselect_module:_eselect_module' \
        '2:eselect_action:_eselect_action' \
        '*:eselect_complete_action:_eselect_complete_action'
      ;;
    *-config)
      _arguments -n \
        "1:action:_eselect_action" \
        '*:eselect_complete_action:_eselect_complete_action'
      ;;
  esac
}

eselect_comp "$@"

# vim: set et sw=2 ts=2 ft=zsh:
